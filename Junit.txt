package pobj.motx.tme1.test;



import static org.junit.Assert.*;



import org.junit.Test;


import pobj.motx.tme1.Case;



public class CaseTest {

	

	@Test
	
	public void testIsPleine() {
		
		Case cv = new Case(0, 1, ' ');
		
		Case cp = new Case(1, 0, '*');
		
		Case cc = new Case(7, 5, 'z');
		
		assertEquals(false, cv.isPleine());
		
		assertEquals(true, cp.isPleine());
		
		assertEquals(false, cc.isPleine());
		
		System.out.println("Succès tests sur Case : isPleine");



3.1. assertEquals
The assertEquals assertion verifies that the expected and the actual values are equal:

@Test
public void whenAssertingEquality_thenEqual() {
    String expected = "Baeldung";
    String actual = "Baeldung";
 
    assertEquals(expected, actual);
}
It’s also possible to specify a message to display when the assertion fails:

assertEquals("failure - strings are not equal", expected, actual);





3.2. assertArrayEquals
If we want to assert that two arrays are equals, we can use the assertArrayEquals:


@Test
public void whenAssertingArraysEquality_thenEqual() {
    char[] expected = {'J','u','n','i','t'};
    char[] actual = "Junit".toCharArray();
     
    assertArrayEquals(expected, actual);
}
If both arrays are null, the assertion will consider them equal:

@Test
public void givenNullArrays_whenAssertingArraysEquality_thenEqual() {
    int[] expected = null;
    int[] actual = null;
 
    assertArrayEquals(expected, actual);
}







3.3. assertNotNull and assertNull
When we want to test if an object is null we can use the assertNull assertion:


@Test
public void whenAssertingNull_thenTrue() {
    Object car = null;
     
    assertNull("The car should be null", car);
}
In the opposite way, if we want to assert that an object should not be null we can use the assertNotNull assertion.














3.4. assertNotSame and assertSame
With assertNotSame, it’s possible to verify if two variables don’t refer to the same object:

@Test
public void whenAssertingNotSameObject_thenDifferent() {
    Object cat = new Object();
    Object dog = new Object();
 
    assertNotSame(cat, dog);
}
Otherwise, when we want to verify that two variables refer to the same object, we can use the assertSame assertion.















3.5. assertTrue and assertFalse
In case we want to verify that a certain condition is true or false, we can respectively use the assertTrue assertion or the assertFalse one:

@Test
public void whenAssertingConditions_thenVerified() {
    assertTrue("5 is greater then 4", 5 > 4);
    assertFalse("5 is not greater then 6", 5 > 6);
}













3.6. fail
The fail assertion fails a test throwing an AssertionFailedError. It can be used to verify that an actual exception is thrown or when we want to make a test failing during its development.

Let’s see how we can use it in the first scenario:

@Test
public void whenCheckingExceptionMessage_thenEqual() {
    try {
        methodThatShouldThrowException();
        fail("Exception not thrown");
    } catch (UnsupportedOperationException e) {
        assertEquals("Operation Not Supported", e.getMessage());
    }
}












3.7. assertThat
The assertThat assertion is the only one in JUnit 4 that has a reverse order of the parameters compared to the other assertions.

In this case, the assertion has an optional failure message, the actual value, and a Matcher object.

Let’s see how we can use this assertion to check if an array contains particular values:

@Test
public void testAssertThatHasItems() {
    assertThat(
      Arrays.asList("Java", "Kotlin", "Scala"), 
      hasItems("Java", "Kotlin"));
}
Additional information, on the powerful use of the assertThat assertion with Matcher object, is available at Testing with Hamcrest.